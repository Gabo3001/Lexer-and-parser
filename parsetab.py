
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'COLON COMMA DIF DIV ELSE EQ FLOAT GREATER ID IF INT LESS L_CURPAR L_PAR MINUS MULT PLUS PRINT PROGRAM R_CURPAR R_PAR SEMICOLON STRING VAR\n    program  : PROGRAM ID SEMICOLON programT\n    \n    programT : vars programF\n             | programF\n    \n    programF : bloque empty\n    \n    vars  : VAR varsT\n    \n    varsT : ID COMMA varsT\n          | ID COLON tipo SEMICOLON varsF\n    \n    varsF : varsT\n          | empty\n    \n    tipo  : INT empty\n          | FLOAT empty\n    \n    bloque  : L_CURPAR bloqueT\n    bloqueT : estatuto bloqueT\n            | R_CURPAR  empty\n    \n    estatuto  : asignacion empty\n              | condicion empty\n              | escritura empty\n    \n    asignacion  : ID EQ expresion SEMICOLON empty\n    \n    escritura  : PRINT L_PAR escrituraT\n    escrituraT : expresion escrituraF\n               | STRING escrituraF\n    escrituraF : COMMA  escrituraT\n               | R_PAR SEMICOLON empty\n    \n    expresion  : exp expresionT\n    expresionT : LESS exp empty\n               | GREATER exp empty\n               | DIF exp empty\n               | empty\n    \n    condicion  : IF L_PAR expresion R_PAR bloque condicionT\n    condicionT : ELSE bloque empty\n               | empty\n    \n    exp  : termino expT\n    expT : PLUS exp\n         | MINUS exp\n         | empty\n    \n    termino  : factor terminoT\n    terminoT : MULT termino\n         | DIV termino\n         | empty\n    \n    factor  : L_PAR expresion R_PAR empty\n            | factorT\n    factorT : PLUS factorF\n            | MINUS factorF\n            | factorF\n    factorF : varcte empty\n    \n    varcte  : ID empty\n            | INT empty\n            | FLOAT empty\n    \n    empty : \n    '
    
_lr_action_items = {'PROGRAM':([0,],[2,]),'$end':([1,5,7,9,11,14,15,17,26,27,],[0,-1,-3,-49,-2,-4,-12,-49,-13,-14,]),'ID':([2,8,10,15,16,17,18,19,20,24,26,27,28,29,30,31,32,33,43,45,47,52,55,59,61,63,64,66,67,70,71,80,81,83,87,96,97,98,103,105,106,107,108,],[3,13,21,-12,21,-49,-49,-49,-49,13,-13,-14,-15,-16,-17,38,38,38,38,38,38,-19,13,-49,38,38,38,38,38,38,38,-20,38,-21,-18,-49,-22,-49,-29,-31,-23,-49,-30,]),'SEMICOLON':([3,35,36,37,38,39,40,41,42,44,46,48,49,50,56,57,58,60,62,65,68,69,72,74,75,76,77,78,82,88,89,90,91,92,93,94,95,99,100,101,102,],[4,55,-49,-49,-49,59,-49,-49,-49,-41,-44,-49,-49,-49,-10,-11,-46,-24,-28,-32,-35,-36,-39,-42,-43,-45,-47,-48,98,-49,-49,-49,-33,-34,-37,-38,-49,-25,-26,-27,-40,]),'VAR':([4,],[8,]),'L_CURPAR':([4,6,12,34,55,79,84,85,86,104,],[10,10,-5,-6,-49,10,-7,-8,-9,10,]),'R_CURPAR':([10,15,16,17,18,19,20,26,27,28,29,30,52,59,80,83,87,96,97,98,103,105,106,107,108,],[17,-12,17,-49,-49,-49,-49,-13,-14,-15,-16,-17,-19,-49,-20,-21,-18,-49,-22,-49,-29,-31,-23,-49,-30,]),'IF':([10,15,16,17,18,19,20,26,27,28,29,30,52,59,80,83,87,96,97,98,103,105,106,107,108,],[22,-12,22,-49,-49,-49,-49,-13,-14,-15,-16,-17,-19,-49,-20,-21,-18,-49,-22,-49,-29,-31,-23,-49,-30,]),'PRINT':([10,15,16,17,18,19,20,26,27,28,29,30,52,59,80,83,87,96,97,98,103,105,106,107,108,],[23,-12,23,-49,-49,-49,-49,-13,-14,-15,-16,-17,-19,-49,-20,-21,-18,-49,-22,-49,-29,-31,-23,-49,-30,]),'COMMA':([13,38,40,41,42,44,46,48,49,50,53,54,58,60,62,65,68,69,72,74,75,76,77,78,88,89,90,91,92,93,94,95,99,100,101,102,],[24,-49,-49,-49,-49,-41,-44,-49,-49,-49,81,81,-46,-24,-28,-32,-35,-36,-39,-42,-43,-45,-47,-48,-49,-49,-49,-33,-34,-37,-38,-49,-25,-26,-27,-40,]),'COLON':([13,],[25,]),'ELSE':([15,17,26,27,96,],[-12,-49,-13,-14,104,]),'EQ':([21,],[31,]),'L_PAR':([22,23,31,32,33,43,61,63,64,66,67,70,71,81,],[32,33,43,43,43,43,43,43,43,43,43,43,43,43,]),'INT':([25,31,32,33,43,45,47,61,63,64,66,67,70,71,81,],[36,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'FLOAT':([25,31,32,33,43,45,47,61,63,64,66,67,70,71,81,],[37,50,50,50,50,50,50,50,50,50,50,50,50,50,50,]),'PLUS':([31,32,33,38,41,42,43,44,46,48,49,50,58,61,63,64,66,67,69,70,71,72,74,75,76,77,78,81,93,94,95,102,],[45,45,45,-49,66,-49,45,-41,-44,-49,-49,-49,-46,45,45,45,45,45,-36,45,45,-39,-42,-43,-45,-47,-48,45,-37,-38,-49,-40,]),'MINUS':([31,32,33,38,41,42,43,44,46,48,49,50,58,61,63,64,66,67,69,70,71,72,74,75,76,77,78,81,93,94,95,102,],[47,47,47,-49,67,-49,47,-41,-44,-49,-49,-49,-46,47,47,47,47,47,-36,47,47,-39,-42,-43,-45,-47,-48,47,-37,-38,-49,-40,]),'STRING':([33,81,],[54,54,]),'MULT':([38,42,44,46,48,49,50,58,74,75,76,77,78,95,102,],[-49,70,-41,-44,-49,-49,-49,-46,-42,-43,-45,-47,-48,-49,-40,]),'DIV':([38,42,44,46,48,49,50,58,74,75,76,77,78,95,102,],[-49,71,-41,-44,-49,-49,-49,-46,-42,-43,-45,-47,-48,-49,-40,]),'LESS':([38,40,41,42,44,46,48,49,50,58,65,68,69,72,74,75,76,77,78,91,92,93,94,95,102,],[-49,61,-49,-49,-41,-44,-49,-49,-49,-46,-32,-35,-36,-39,-42,-43,-45,-47,-48,-33,-34,-37,-38,-49,-40,]),'GREATER':([38,40,41,42,44,46,48,49,50,58,65,68,69,72,74,75,76,77,78,91,92,93,94,95,102,],[-49,63,-49,-49,-41,-44,-49,-49,-49,-46,-32,-35,-36,-39,-42,-43,-45,-47,-48,-33,-34,-37,-38,-49,-40,]),'DIF':([38,40,41,42,44,46,48,49,50,58,65,68,69,72,74,75,76,77,78,91,92,93,94,95,102,],[-49,64,-49,-49,-41,-44,-49,-49,-49,-46,-32,-35,-36,-39,-42,-43,-45,-47,-48,-33,-34,-37,-38,-49,-40,]),'R_PAR':([38,40,41,42,44,46,48,49,50,51,53,54,58,60,62,65,68,69,72,73,74,75,76,77,78,88,89,90,91,92,93,94,95,99,100,101,102,],[-49,-49,-49,-49,-41,-44,-49,-49,-49,79,82,82,-46,-24,-28,-32,-35,-36,-39,95,-42,-43,-45,-47,-48,-49,-49,-49,-33,-34,-37,-38,-49,-25,-26,-27,-40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'programT':([4,],[5,]),'vars':([4,],[6,]),'programF':([4,6,],[7,11,]),'bloque':([4,6,79,104,],[9,9,96,107,]),'varsT':([8,24,55,],[12,34,85,]),'empty':([9,17,18,19,20,36,37,38,40,41,42,48,49,50,55,59,88,89,90,95,96,98,107,],[14,27,28,29,30,56,57,58,62,68,72,76,77,78,86,87,99,100,101,102,105,106,108,]),'bloqueT':([10,16,],[15,26,]),'estatuto':([10,16,],[16,16,]),'asignacion':([10,16,],[18,18,]),'condicion':([10,16,],[19,19,]),'escritura':([10,16,],[20,20,]),'tipo':([25,],[35,]),'expresion':([31,32,33,43,81,],[39,51,53,73,53,]),'exp':([31,32,33,43,61,63,64,66,67,81,],[40,40,40,40,88,89,90,91,92,40,]),'termino':([31,32,33,43,61,63,64,66,67,70,71,81,],[41,41,41,41,41,41,41,41,41,93,94,41,]),'factor':([31,32,33,43,61,63,64,66,67,70,71,81,],[42,42,42,42,42,42,42,42,42,42,42,42,]),'factorT':([31,32,33,43,61,63,64,66,67,70,71,81,],[44,44,44,44,44,44,44,44,44,44,44,44,]),'factorF':([31,32,33,43,45,47,61,63,64,66,67,70,71,81,],[46,46,46,46,74,75,46,46,46,46,46,46,46,46,]),'varcte':([31,32,33,43,45,47,61,63,64,66,67,70,71,81,],[48,48,48,48,48,48,48,48,48,48,48,48,48,48,]),'escrituraT':([33,81,],[52,97,]),'expresionT':([40,],[60,]),'expT':([41,],[65,]),'terminoT':([42,],[69,]),'escrituraF':([53,54,],[80,83,]),'varsF':([55,],[84,]),'condicionT':([96,],[103,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> PROGRAM ID SEMICOLON programT','program',4,'p_program','duck.py',116),
  ('programT -> vars programF','programT',2,'p_program','duck.py',118),
  ('programT -> programF','programT',1,'p_program','duck.py',119),
  ('programF -> bloque empty','programF',2,'p_program','duck.py',121),
  ('vars -> VAR varsT','vars',2,'p_vars','duck.py',127),
  ('varsT -> ID COMMA varsT','varsT',3,'p_vars','duck.py',129),
  ('varsT -> ID COLON tipo SEMICOLON varsF','varsT',5,'p_vars','duck.py',130),
  ('varsF -> varsT','varsF',1,'p_vars','duck.py',132),
  ('varsF -> empty','varsF',1,'p_vars','duck.py',133),
  ('tipo -> INT empty','tipo',2,'p_tipo','duck.py',139),
  ('tipo -> FLOAT empty','tipo',2,'p_tipo','duck.py',140),
  ('bloque -> L_CURPAR bloqueT','bloque',2,'p_bloque','duck.py',146),
  ('bloqueT -> estatuto bloqueT','bloqueT',2,'p_bloque','duck.py',147),
  ('bloqueT -> R_CURPAR empty','bloqueT',2,'p_bloque','duck.py',148),
  ('estatuto -> asignacion empty','estatuto',2,'p_estatuto','duck.py',154),
  ('estatuto -> condicion empty','estatuto',2,'p_estatuto','duck.py',155),
  ('estatuto -> escritura empty','estatuto',2,'p_estatuto','duck.py',156),
  ('asignacion -> ID EQ expresion SEMICOLON empty','asignacion',5,'p_asignacion','duck.py',162),
  ('escritura -> PRINT L_PAR escrituraT','escritura',3,'p_escritura','duck.py',168),
  ('escrituraT -> expresion escrituraF','escrituraT',2,'p_escritura','duck.py',169),
  ('escrituraT -> STRING escrituraF','escrituraT',2,'p_escritura','duck.py',170),
  ('escrituraF -> COMMA escrituraT','escrituraF',2,'p_escritura','duck.py',171),
  ('escrituraF -> R_PAR SEMICOLON empty','escrituraF',3,'p_escritura','duck.py',172),
  ('expresion -> exp expresionT','expresion',2,'p_expresion','duck.py',178),
  ('expresionT -> LESS exp empty','expresionT',3,'p_expresion','duck.py',179),
  ('expresionT -> GREATER exp empty','expresionT',3,'p_expresion','duck.py',180),
  ('expresionT -> DIF exp empty','expresionT',3,'p_expresion','duck.py',181),
  ('expresionT -> empty','expresionT',1,'p_expresion','duck.py',182),
  ('condicion -> IF L_PAR expresion R_PAR bloque condicionT','condicion',6,'p_condicion','duck.py',188),
  ('condicionT -> ELSE bloque empty','condicionT',3,'p_condicion','duck.py',189),
  ('condicionT -> empty','condicionT',1,'p_condicion','duck.py',190),
  ('exp -> termino expT','exp',2,'p_exp','duck.py',196),
  ('expT -> PLUS exp','expT',2,'p_exp','duck.py',197),
  ('expT -> MINUS exp','expT',2,'p_exp','duck.py',198),
  ('expT -> empty','expT',1,'p_exp','duck.py',199),
  ('termino -> factor terminoT','termino',2,'p_termino','duck.py',205),
  ('terminoT -> MULT termino','terminoT',2,'p_termino','duck.py',206),
  ('terminoT -> DIV termino','terminoT',2,'p_termino','duck.py',207),
  ('terminoT -> empty','terminoT',1,'p_termino','duck.py',208),
  ('factor -> L_PAR expresion R_PAR empty','factor',4,'p_factor','duck.py',214),
  ('factor -> factorT','factor',1,'p_factor','duck.py',215),
  ('factorT -> PLUS factorF','factorT',2,'p_factor','duck.py',216),
  ('factorT -> MINUS factorF','factorT',2,'p_factor','duck.py',217),
  ('factorT -> factorF','factorT',1,'p_factor','duck.py',218),
  ('factorF -> varcte empty','factorF',2,'p_factor','duck.py',219),
  ('varcte -> ID empty','varcte',2,'p_varcte','duck.py',225),
  ('varcte -> INT empty','varcte',2,'p_varcte','duck.py',226),
  ('varcte -> FLOAT empty','varcte',2,'p_varcte','duck.py',227),
  ('empty -> <empty>','empty',0,'p_empty','duck.py',236),
]
